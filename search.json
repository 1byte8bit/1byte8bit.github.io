[{"title":"MySQL常见问题及优化","url":"/2019/01/26/mysql-comtimization/","content":"## MySQL的优化方案有哪一些？\n本文介绍一下优化SQL语句和优化索引。\n\n### 本文记录MySQL 本文梗概如下:\n* 优化SQL\n* 优化索引\n* 开启查询缓存\n<!-- more -->\n* 配合使用Redis\n* MySQL主从复制\n* 优化MySQL自带的分区表\n* 垂直拆分,分解大系统,成为小系统,分布式系统\n* 水平拆分\n* 硬件上的升级、存储引擎、MySQL本身的配置文件\n\n## （一）优化SQL\n#### 1、通过MySQL自有的优化语句\n优化SQL语句，通过脚本命令来了解执行率较低的语句，显示一下状态等。\n* SHOW命令\n  * SHOW Status可以了解SQL的执行频率。可以显示日志，显示特定的数据库、表、索引以及进程还有权限表中的信息等等。\n介绍一些常见的字段\n  * Innodb_rows_read:Select查询返回的行数。\n  * Innodb_rows_inserted:执行INSERT操作插入的行数。\n  * Innodb_rows_updated:执行UPDATE操作更新的行数。\n  * Innodb_rows_deleted:执行DELETE操作删除的行数。\n\n","tags":["MySQL"]},{"title":"test4","url":"/2019/01/04/test4/"},{"title":"test3","url":"/2019/01/04/test3/"},{"title":"test2","url":"/2019/01/02/test2/","content":"<!-- more -->\n"},{"title":"test","url":"/2019/01/02/test/","content":"<!-- more -->\n"},{"title":"MyBatis语法总结","url":"/2019/01/02/mybatis-exc/","content":"## 背景\n* MyBatis在一些情况下，与在MySQL里面直接查询两者的运行情况（此处无关结果集）不一定是一样的，有些语句在MyBatis中运行是报错的。\n<!-- more -->\n\n## MyBatis中的<where></where>标签\n\n","tags":["MyBatis"]},{"title":"Vue.js生命周期理解","url":"/2019/01/02/vue-life-cycle/","tags":["Vue.js"]},{"title":"前端后端数据交互过程例解与调试","url":"/2018/12/29/debugger-skills/","content":"## 背景\n前后端分离项目进行数据交互的时候，出现错误改如何快速定位调试。\n<!-- more -->\n## 前后交互数据的过程\n","tags":["技术"]},{"title":"方案解决与思路提示","url":"/2018/12/25/issues-reminders/","content":"\n## 背景\n旨在积累一些问题的解决方案和思路，下次出现快速解决。少走弯路；提高效率。\n<!-- more -->\n### 微服务分机部署\n* 分机部署，如果是不同服务商的服务器，加载速度会变得很慢。可以使用CDN加速。即使是同一个运营商不同地域的，也会这样。\n* 记得开放端口和设置安全组规则（比如阿里云的），想当于设置白名单。\n* 微服务的占用性能比较大，如果在出现线程被自动kill的现象，要即使查看是不是内存不足导致，从而出发了kill最大内存的进程。\n\n### 整理自己的资料\n* 学会使用标签。\n* Notes是个好东西。\n* 之后每份重要的文件都要放上标签，便于查找。\n* 自己的资料库要形成索引。","tags":["技术"]},{"title":"后端开发之微服务开发遇到的问题和总结","url":"/2018/12/19/server-spring-cloud-qa-and-summary/","content":"\n## 背景\n微服务开发中基础知识整理和技巧整理。\n<!-- more -->\n\n## 生日跨年查询\n代码：\n```java\n    <select id=\"selectByBirthday\" parameterType=\"com.security.common.entity.PageExample\" resultMap=\"BaseResultMap\">\n        select a.* from (\n        SELECT\n        t.*, y.position_name\n        FROM\n        m_employee_info t\n        LEFT JOIN m_position y ON t.position_id = y.position_id\n        WHERE\n        t.employee_id IS NOT NULL\n        <if test=\"data.startDataBirthdayPoint != null and data.startDataBirthdayPoint != '' and data.endDataBirthdayPoint != null and data.endDataBirthdayPoint !=''\">\n            AND DATE_FORMAT(t.employee_birthday , '%m%d') BETWEEN #{data.startDataBirthdayPoint} AND #{data.endDataBirthdayPoint}\n        </if>\n        UNION ALL\n        SELECT\n        t.*, y.position_name\n        FROM\n        m_employee_info t\n        LEFT JOIN m_position y ON t.position_id = y.position_id\n        WHERE\n        t.employee_id IS NOT NULL\n        <if test=\"data.startDataBirthdayPoint != null and data.startDataBirthdayPoint != '' and data.endDataBirthdayPoint != null and data.endDataBirthdayPoint !=''\">\n            AND DATE_FORMAT(t.employee_birthday , '%m%d') BETWEEN #{data.startDataBirthdayPoint} AND '1231'\n        </if>\n        UNION ALL\n        SELECT\n        t.*, y.position_name\n        FROM\n        m_employee_info t\n        LEFT JOIN m_position y ON t.position_id = y.position_id\n        WHERE\n        t.employee_id IS NOT NULL\n        <if test=\"data.startDataBirthdayPoint != null and data.startDataBirthdayPoint != '' and data.endDataBirthdayPoint != null and data.endDataBirthdayPoint !=''\">\n            AND DATE_FORMAT(t.employee_birthday , '%m%d') BETWEEN '0101' AND #{data.endDataBirthdayPoint}\n        </if>\n        ) as a\n    </select>\n```\n* 查询生日，将年份截取，只传入月和日。\n* 在跨年处理的时候，需要将时间截断一下。开始的时间到1231，作为一个阶段，从0101到终止的时间，作为第二个阶段。\n\n#### 有第二种方法但是不推荐这样写\n\n```java\nSELECT\n    *\nFROM\n    m_employee_info t\nWHERE(date_add(t.employee_birthday ,INTERVAL TIMESTAMPDIFF(YEAR ,t.employee_birthday ,DATE_FORMAT(now() , '%Y-%m-%d')) YEAR))\n    BETWEEN '2018-12-01' AND '2019-01-15'\nOR(date_add(t.employee_birthday ,INTERVAL TIMESTAMPDIFF(YEAR ,t.employee_birthday ,DATE_FORMAT(now() , '%Y-%m-%d'))+1 YEAR))\n    BETWEEN '2018-12-01' AND '2019-01-15'\n```\n\n* ```上述代码使用Navicat的Beautify SQL功能美化整理```\n* 也能实现跨年查询，还需要另外加一部分\n* 这样的问题是函数比较多，每次将所有的用户的生日全部改成查询起始时间点的所在年份，如果人多，性能会比较低。\n\n## MyBatis映射文件中的注意事项\n* ResultMap中子标签```<result/>```标签中的```property```和```column```对应字段必须所在的```entity```实体类中；\n* 如果```entity```实体类中存在，但是没有写在```ResultMap```中，则不显示；\n* ```<if>```标签中存在```if```条件，如果外层关联过许多表的话，查询出的数据结果集可能会用重复，因此，限制条件必须要放到外层，而不是写在```<if>```标签中；\n* 在```Navicate```中的```union all```语句是能够正确查询的，但是放到```mapper```映射文件中，需要加一层，```select a.* from (...) a```；\n* MyBatis中不支持通常写法的大于号和小于号，这里需要转义：大于号：```&gt;```，小于号：```&lt;```；\n","tags":["Spring Cloud"]},{"title":"前端开发Vue.js问题整理与总结","url":"/2018/12/18/front-vue-js-qa-and-summary/","content":"## 背景\n* 所在的项目上前端开发使用技术栈为Vue.js。\n* 本文的主要内容开发时候遇到的问题、解决的方案、常用的解决方法。\n* 思路。\n<!-- more -->\n## 测试代码高亮\n\n```javascript\n// 简单语法\nVue.component('props-demo-simple', {\n  props: ['size', 'myMessage']\n})\n\n// 对象语法，提供校验\nVue.component('props-demo-advanced', {\n  props: {\n    // 检测类型\n    height: Number,\n    // 检测类型 + 其他验证\n    age: {\n      type: Number,\n      default: 0,\n      required: true,\n      validator: function (value) {\n        return value >= 0\n      }\n    }\n  }\n})\n```\n## 组件弹窗\n* 原因:主要原因是没理解弹窗的原理。写的时候没有按照步骤和关键点进行。\n\n## JavaScript数据结构\n* 对JavaScript数组的理解不熟悉。\n* 对返回的数据做不出明确的判断来。\n\n## 组件通信\n\n## 数据绑定\n\n\n","tags":["Vue.js"]},{"title":"微服务模块的理解","url":"/2018/12/17/micro-service/","content":"## 项目微服务结构整体理解\n## 背景\n* 各司其职、集中管理、存在单向或多向调用关系；\n<!-- more -->\n\n## 意义\n* 提高迭代效率；\n* 降低开发黏连性；\n* 节约成本\n\n## 实现\n### 结构\n#### 项目启动的入口CenterBootstrap\n* 各项服务的注册、管理中心。\n* 微服务请求转发。\n#### 鉴权（权限）服务AuthBootstrap\n* JWT处理权限\n#### 字典服务DictBootstrap\n* 管理项目的数据字典。\n#### 后台管理服务AdminBootstrap\n* 连接数据库、处理数据。\n#### 网关服务GateBootstrap\n* 接收前端的请求并转发至其他服务。","tags":["微服务"]},{"title":"iOS开发基础之学习Objective-C笔记一","url":"/2018/12/11/ios-init-oc-lang/","content":"## 前言\n<!-- more -->\n\n## 背景\n* 学习一门新的手艺。\n* 做个小的Demo，解决自己对于现有的某些工具不能满足自己需求的痛点。\n* Apple Store一些应用需要花钱。\n\n## 计划\n* 第一、先看书。重点关注一下指针这块。\n* 第二、照着实例写一写UI。画一画界面。\n* 第三、写一写后台的逻辑。实现一些小的功能。\n* 第四、整合记录一下笔记和发布一下源码。提升一下。\n* 第五、规划一个tools的功能，写计划书，准备开发。","tags":["Objective-C"]}]