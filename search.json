[{"title":"Java List深拷贝","url":"/2020/03/16/d2fcc40a-e791-4704-8ddb-d0123aed0904/","content":"<!-- more -->\n\n## 1 概要\n遇到一个取数的过程业务代码段：<br>\n```java\n    // ......\n    List<T> list1 = xx.getListByParam(param1);\n    map.put(\"list1\",list1);\n    List<T> list2 = xx.getListByParam(param2);\n    map.put(\"list2\", list2);\n    // ......\n```\n其中，list1中，某属性的值，在list2获取的过程中，发生改变。出现问题。\n\n\n## 2 Java List 深拷贝的问题\n\n解决方法\n```java\n    public static <T> List<T> deepCopy(List<T> list) throws IOException, ClassNotFoundException {\n\n        ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(arrayOutputStream);\n        objectOutputStream.writeObject(list);\n\n        ByteArrayInputStream arrayInputStream = new ByteArrayInputStream(arrayOutputStream.toByteArray());\n        ObjectInputStream objectInputStream = new ObjectInputStream(arrayInputStream);\n\n        @SuppressWarnings(\"unchecked\")\n        List<T> reList = (List<T>) objectInputStream.readObject();\n        return reList;\n    }\n```\n\n## 3 问题分析\n代码表现是：\n* Controller类中的两个不同的方法，调用了同一个Serveice类中的方法\n* 这个动作是一个查询动作引起\n* 这个动作到了Controller层，会调用多次、多个Service类的方法\n\n避免出现此问题，导致数据不准确，则需要考虑Java List的深拷贝的问题。\n\n## 4 分析List的深浅拷贝","tags":["java"]},{"title":"使用Bash Shell实现自定义信息修改flowable工作流引擎war包配置","url":"/2020/02/17/2eeba61b-ff4b-4166-ae26-ee61b6002724/","content":"<!-- more -->\n\n**变更记录**\n\n| 变更项 | 时间 | 更新者 |\n| --- | --- | --- |\n| 初始化文档，实现war包的处理| 2020.01 | me |\n\n# 1、概要\n部署flowable工作流引擎，需要根据所在服务器的IP和MySQL账密信息，修改很多配置项，为方便，这些配置项，采用脚本批处理的方式，将用户在终端输入的信息，进行处理并修改配置项。\n\n\n# 2、脚本内容\n脚本做了以下事情：\n* 解压flowable.zip\n* 创建flowable-admin等5个文件夹，并将flowable-admin.war等5个war包依次移动至相对应的文件夹\n* 解压war包 && 进入指定目录，处理配置文件\n* 接受用户输入的配置项各项信息\n* 每一个配置文件输入结束时，会确认是否要继续，正确输入y，则生成application.properies配置文件\n* 错误则输入n，输入指定的数字，进行纠正，直至用户输入y确认成配置文件\n* 将处理好的文件，打包成war包\n\n\n# 3、实现\n如图，使用的时候，保证脚本和压缩包在同一目录下：\n![](https://flowable-deploy.oss-cn-beijing.aliyuncs.com/tutorial/Screen%20Shot%202020-03-21%20at%2022.55.40.png)\n<br>\n这段代码是获取路径\n\n```shell\nCURDIR=$(\n\tcd $(dirname ${BASH_SOURCE[0]})\n\tpwd\n)\n```\n<br>\n处理用户输入内容\n```shell\ncd flowable-admin/WEB-INF/classes\nrm -rf application.properties\ntouch application.properties\n# 提示端口，如果不输入，会有默认值9988\necho -n \"[1]please input the server.port = ? (default is 9988)\"\nread port\nif [[ $port == \"\" ]]; then\n\tport='9988'\nfi\n\necho -n \"your server.port is $port\"\n\necho -n \"[13]please input the MySQL server host ip = ? (default is 127.0.0.1)\"\nread MySQLHostIp\nif [[ $MySQLHostIp == \"\" ]]; then\n\tMySQLHostIp='127.0.0.1'\nfi\n\necho -n \"[14]please input the MySQL server host port = ? (default is 3306)\"\nread MySQLHostPort\nif [[ $MySQLHostPort == \"\" ]]; then\n\tMySQLHostPort='3306'\nfi\n```\n<br>\n上文说过，如果错了，是可以根据序号修正输入信息的。如果flag不为y，则会一直询问正确输入，直至输入y为止。\n```shell\nread flag\nwhile [[ $flag == \"n\" ]]; do\n\techo 'input number 1 to 26, the numbers are not continuous'\n\techo 'your number is'\n\tread aNum\n\tcase $aNum in\n\t1)\n\t\techo 'number is 1, please fix your [port] current!'\n\t\tread line1\n\t\tport=$line1\n\t\t;;\n\t13)\n\t\techo 'number is 13, please fix your [the MySQL server host ip] current!'\n\t\tread line13\n\t\tMySQLHostIp=$line13\n\t\t;;\n\t14)\n\t\techo 'number is 14, please fix your [the MySQL server host port] current!'\n\t\tread line14\n\t\tMySQLHostPort=$line14\n\t\t;;\n\t*)\n\t\techo 'Error'\n\t\t;;\n\tesac\n\techo -n \"confirm，if wrong, please choice 'n' to fix it !, input y/n:\"\n\tread flag\ndone\n```\n\n<br>\n最后，使用\n\n```shell\ncat >application.properties <<EOF\n```\n\n并配合类似:\n\n```shell\nspring.datasource.username=$datasourceUsername\nspring.datasource.password=$datasourcePassword\n```\n\n将读取终端input的变量值写入要生成的配置文件中。\n\n# 4、脚本地址\nhttps://flowable.oss-cn-beijing.aliyuncs.com/semi_auto_deploy_flowable_sample.sh","tags":["shell"]},{"title":"开发规范笔记与经验","url":"/2019/03/07/16d9fb52-dd5b-4339-9b38-a98df48a8b46/","content":"<!--more-->\n# 1、概要\n日常开发中，虽然代码可用性通过，要求的功能实现了，但是有一些规范需要去遵守；避免不注意犯了一些低级错误；本文笔记梳理一些常忽略的点，以免下次再进坑；\n\n1、公共类中的方法最好不要动；\n2、uuid要谨慎使用；\n3、公共的方法要放到公共的类中；\n4、业务类的方法比较多，取名字要规范一些，长点不要紧，但是一定要读出来方法的作用是什么；如果表达不出来，加上必要的注释；\n5、尽量不要捕获类似Exception通用异常，而是捕获特定的异常，具体到哪一种子类型；\n6、在复杂的生产系统中，标准出错STERR不是合适的输出选项，尤其是分布式系统，最好使用产品日志；详细的输出到日志系统中；STREE无法找到堆栈轨迹；\n不要在<b>catch</b>代码块中直接[printStackTrace()](https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#printStackTrace--)\n7、[配置文件]在微服务的resources下的配置文件，可能会有许多的配置文件，每个配置文件尽量要求做到名字直观易懂，必要时在配置文件中做出单独的说明；\n8、Java的类名开头要写明是什么；\n9、Java中的方法要写明作者、邮箱、版本、参数、返回；\n\n# 2、关于异常\n### 2.1、图片的异常\n如果图片不存在，就会在程序运行时引起异常，图片如果是网络资源，有一种方法，如下，可以处理图片异常的情况。\n获取图片的url，记得关闭流。对于异常的情况，则给一个固定的、一定存在的连接。\n```java\n        try {\n            URL urlTemp = new URL(url + employeeInfo.getEmployeeId() + \".jpg\");\n            URLConnection uc = urlTemp.openConnection();\n            InputStream in = uc.getInputStream();\n            in.close();\n        } catch (Exception e) {\n\n            map.put(\"photoUrl\",\"http://192.168.6.125/static/photo/default/boy.png\");\n            e.printStackTrace();\n        }\n```\n","tags":["总结"]}]