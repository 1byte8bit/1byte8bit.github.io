<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习,天天向上</title>
  <icon>https://www.gravatar.com/avatar/3563d1ddc1457652131bef3aa9d25ab0</icon>
  <subtitle>烦恼会飞</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://youxiu.net/"/>
  <updated>2019-04-01T01:50:12.730Z</updated>
  <id>https://youxiu.net/</id>
  
  <author>
    <name>binarytree</name>
    <email>2binarytree@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JHipster笔记之总览和网关(翻译)</title>
    <link href="https://youxiu.net/2019/03/28/285fdec4-ba38-4e57-b655-6fe7edb1e6a8/"/>
    <id>https://youxiu.net/2019/03/28/285fdec4-ba38-4e57-b655-6fe7edb1e6a8/</id>
    <published>2019-03-28T06:52:58.000Z</published>
    <updated>2019-04-01T01:50:12.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概要"><a href="#1、概要" class="headerlink" title="1、概要"></a>1、概要</h3><p>首先自己理解中的JHipster，是一个开发平台，用于生成、开发、部署微服务项目；这篇笔记是在官网学习过程中的记录，基本是依靠自己的理解翻译过来的，其中有部分是自己的理解，记录再次，方便自己理解。<br><a id="more"></a></p><h3 id="2、通过JHipster使用微服务"><a href="#2、通过JHipster使用微服务" class="headerlink" title="2、通过JHipster使用微服务"></a>2、通过JHipster使用微服务</h3><h4 id="2-1-微服务架构和单体架构"><a href="#2-1-微服务架构和单体架构" class="headerlink" title="2.1 微服务架构和单体架构"></a>2.1 微服务架构和单体架构</h4><p>第一个问题，想逆向生成一个单体应用or一个微服务结构的应用？JHipster会给你两个选择；</p><ul><li>单体架构，使用单独的、多适用性（one-size-fits-all application），同时包含前端的Angular代码和后盾的Spring Boot代码。</li><li>微服务架构，切分了前台和后端，使得应用更加易于伸缩和扩展，解决基础设施问题。</li></ul><p>一个单体应用，更加容易工作，不需要其他更多的特别要求，这是我们的推荐操作，也是默认的。</p><h4 id="2-2、微服务架构总览"><a href="#2-2、微服务架构总览" class="headerlink" title="2.2、微服务架构总览"></a>2.2、微服务架构总览</h4><p>JHipster的微服务架构的工作方式如下：</p><ul><li>网关是一个JHipster-generated的应用（逆向产生），它来处理网络的流量（handles Web traffic），并提供Angular应用程序。如果您遵循前后端的模式，可以有多个网关（非强制要求）。</li><li>Traefik是一个HTTP反向代理模型、负载均衡器，可以与网关一起使用。</li><li>JHipster Registry是一个运行时程序，所有的注册者可以从这个注册中心获取到他们的配置，还可以提供运行时的镜像控制面板。</li><li>Consul是发现服务，和Eureka注册中心是一样，采用KV存储方式；它可以作为代替品使用。</li><li>JHipster UAA全称：JHipster-based User Authentication and Authorization system，使用的是OAuth2.0协议。</li><li>Microservices是使用JHipster-generated应用逆向生成的，处理REST请求，它们多个实例可以并行，处理大量的负载请求。</li><li>JHipster Console是一个基于ELK堆栈的监视和警报控制台。</li></ul><p>在下面的这个图中，绿色组件是特定于应用程序的，蓝色组件提供其底层基础设施。<br><img src="../../../../../../images/2019032802.png" alt=""></p><h3 id="3、网关"><a href="#3、网关" class="headerlink" title="3、网关"></a>3、网关</h3><p>JHipster可以逆向出API网关。网关是一个正常的JHipster应用，可以在项目中使用普通的JHipster选项和开发工作流，它开一个作为一个程序的入口。更具体一些，它为所有的微服务提供了HTTP路由、负载均衡、服务质量、安全性和API文档。</p><h4 id="3-1、概要提示"><a href="#3-1、概要提示" class="headerlink" title="3.1、概要提示"></a>3.1、概要提示</h4><p>1.架构图<br>2.HTTP路由<br>3.安全性<br>4.自动文档<br>5.速率限制<br>6.访问控制策略</p><h4 id="3-2、架构图"><a href="#3-2、架构图" class="headerlink" title="3.2、架构图"></a>3.2、架构图</h4><p>如下图所示：</p><p><img src="../../../../../../images/3.png" alt=""></p><p>分析:</p><h4 id="3-3、HTTP使用网关进行路由请求"><a href="#3-3、HTTP使用网关进行路由请求" class="headerlink" title="3.3、HTTP使用网关进行路由请求"></a>3.3、HTTP使用网关进行路由请求</h4><p>当网关和微服务运行时，他们会注册自己到注册中心上。网关会自动代理所有的请求到微服务上，使用名字即可。<br>例如：你过你的网关运行是：<b><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></b>，你可以通过<b><a href="http://localhost:8080/app1/rest/foos" target="_blank" rel="noopener">http://localhost:8080/app1/rest/foos</a></b>来获取foos来获取app1提供的服务；如果您尝试使用浏览器做到这中操作，不要忘记，REST资源在JHipster中默认是安全的，所以你需要正确的JWT头部信息来实现，或者删除微服务中的<b>MicroserviceSecurityConfiguration</b>这个Java类中的这些URL的安全性。<br>如果一个服务运行着多个实例：网关将会总注册表中获取这些实例：</p><ul><li>使用Netflix Ribbon处理HTTP请求的负载均衡</li><li>使用Netflix Hystrix熔断器，当实例崩溃会被安全的、快速的移除<h4 id="3-4、安全"><a href="#3-4、安全" class="headerlink" title="3.4、安全"></a>3.4、安全</h4>略。<h4 id="3-5、JWT"><a href="#3-5、JWT" class="headerlink" title="3.5、JWT"></a>3.5、JWT</h4>JWT的简介……..<br>为了能安全考虑，一个JWT的密钥令牌必须在所有的应用之间共享；<h4 id="3-6、速率限制"><a href="#3-6、速率限制" class="headerlink" title="3.6、速率限制"></a>3.6、速率限制</h4>这是一个高级功能；使用<a href="https://github.com/vladimir-bukhtoyarov/bucket4j" target="_blank" rel="noopener">Bucket4j</a>和<a href="https://hazelcast.com/" target="_blank" rel="noopener">Hazelcast</a>来给微服务提供服务。<br>网关提供速率限制的功能，所以REST可以限制请求的数量。</li><li>通过IP限制(针对匿名用户)</li><li>通过用户登录限制(针对已经登录的用户)<br>JHipster<h4 id="3-7、访问控制策略"><a href="#3-7、访问控制策略" class="headerlink" title="3.7、访问控制策略"></a>3.7、访问控制策略</h4>默认情况，所有的微服务注册者都经过网关使用。如果你想把一个特别的API不经过网关，你可以使用网关的特殊访问控制策略过滤，它可以在<b>application-*.yml</b>使用<b>jhipster.gateway.authorized-microservices-endpoints</b>这个属性来配置：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jhipster:</span><br><span class="line">    gateway:</span><br><span class="line">        authorized-microservices-endpoints: # Access Control Policy, if left empty for a route, all endpoints will be accessible</span><br><span class="line">            app1: /api,/v2/api-docs # recommended dev configuration</span><br></pre></td></tr></table></figure></li></ul><p>例如，如果你想只让<b>/api/foo</b>微服务端点<b>bar</b>可用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jhipster:</span><br><span class="line">    gateway:</span><br><span class="line">        authorized-microservices-endpoints:</span><br><span class="line">            bar: /api/foo</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概要&quot;&gt;&lt;a href=&quot;#1、概要&quot; class=&quot;headerlink&quot; title=&quot;1、概要&quot;&gt;&lt;/a&gt;1、概要&lt;/h3&gt;&lt;p&gt;首先自己理解中的JHipster，是一个开发平台，用于生成、开发、部署微服务项目；这篇笔记是在官网学习过程中的记录，基本是依靠自己的理解翻译过来的，其中有部分是自己的理解，记录再次，方便自己理解。&lt;br&gt;
    
    </summary>
    
    
      <category term="JHipster" scheme="https://youxiu.net/tags/JHipster/"/>
    
  </entry>
  
  <entry>
    <title>Spring中的bean-配置与注入</title>
    <link href="https://youxiu.net/2019/03/28/e4d4efd7-c875-4b69-921f-cb6299ef7e72/"/>
    <id>https://youxiu.net/2019/03/28/e4d4efd7-c875-4b69-921f-cb6299ef7e72/</id>
    <published>2019-03-28T01:45:52.000Z</published>
    <updated>2019-03-28T02:42:26.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概要"><a href="#1、概要" class="headerlink" title="1、概要"></a>1、概要</h3><p>Spring中的bean配置和注入，需要理解透彻，但是没有去总结的很全面，在cnblog.com发现一篇文章，作者总结的很全面，原文地址：<a href="https://www.cnblogs.com/wuchanming/p/5426746.html" target="_blank" rel="noopener">https://www.cnblogs.com/wuchanming/p/5426746.html</a>,本文的笔记只是挑出来个人认为重要的部分。<br><a id="more"></a></p><h3 id="2、bean的配置"><a href="#2、bean的配置" class="headerlink" title="2、bean的配置"></a>2、bean的配置</h3><p>Bean的配置信息定义了Bean的实现和依赖关系，Spring容器根据各种形式的Bean配置信息在容器内部建立bean定义注册表，然后根据注册表加载、实例化Bean，并建立Bean和Bean的依赖关系，最后将这些准备就绪的Bean放到Bean缓存池中，以供外层的应用程序进行调用。</p><h5 id="Bean的配置有三种方法："><a href="#Bean的配置有三种方法：" class="headerlink" title="Bean的配置有三种方法："></a>Bean的配置有三种方法：</h5><p>①、基于XML来配置Bean；<br>②、使用注解定义Bean；<br>③、基于Java类提供Bean定义信息；</p><h4 id="2-1、基于XML来配置Bean"><a href="#2-1、基于XML来配置Bean" class="headerlink" title="2.1、基于XML来配置Bean"></a>2.1、基于XML来配置Bean</h4><p>放一张截图：<br><img src="../../../../../../images/2019032801.png" alt=""></p><h4 id="2-2、使用注解定义Bean"><a href="#2-2、使用注解定义Bean" class="headerlink" title="2.2、使用注解定义Bean"></a>2.2、使用注解定义Bean</h4><p>Spring容器成功启动的三大要件分别是：①Bean定义信息、②Bean实现类和③Spring本身；如果采用基于XML的配置，Bean定义信息和Bean实现类本身是分离的；而采用基于注解的配置方式时，<b>Bean定义信息即通过在Bean实现类上标注注解实现<b>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baobaotao.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="comment">//①通过Repository定义一个DAO的Bean</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></b></b></p><p>在①处，我们使用@Component注解在UserDao类声明处对类进行标记，它可以被Spring容器识别，Spring容器自动将POJO转换为容器管理的Bean。<br>它和XML是等效的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"UserDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.baobaotao.anno.UserDao"</span>&gt;&lt;bean/&gt;</span><br></pre></td></tr></table></figure></p><p>除了@Component以外，Spring提供了3个功能基本和@Component等效的注解，他们分别应用于DAO、Service以及Web层的Controller的注解；所以也成这些注解为Bean的衍生注解；<br>①、@Repository:用于对DAO实现类进行标注；<br>②、@Service:用于对Service实现类进行标注；<br>③、@Controller:用于对Controller实现类进行标注；<br>之所以要在@Component之外提供这三个特殊的注解，除了让注解类本身的用途更加清晰明白，此外Spring将赋予他们一些特殊的功能；</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概要&quot;&gt;&lt;a href=&quot;#1、概要&quot; class=&quot;headerlink&quot; title=&quot;1、概要&quot;&gt;&lt;/a&gt;1、概要&lt;/h3&gt;&lt;p&gt;Spring中的bean配置和注入，需要理解透彻，但是没有去总结的很全面，在cnblog.com发现一篇文章，作者总结的很全面，原文地址：&lt;a href=&quot;https://www.cnblogs.com/wuchanming/p/5426746.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wuchanming/p/5426746.html&lt;/a&gt;,本文的笔记只是挑出来个人认为重要的部分。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://youxiu.net/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java注解笔记</title>
    <link href="https://youxiu.net/2019/03/27/18778999-e0d4-4696-9462-88ca98eff534/"/>
    <id>https://youxiu.net/2019/03/27/18778999-e0d4-4696-9462-88ca98eff534/</id>
    <published>2019-03-27T00:33:09.000Z</published>
    <updated>2019-03-27T08:05:55.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>1.1、开发过程中，遇到一些元注解或者常见的注解，本笔记记录一下这些注解的作用以及部分注解的原理。<br><a id="more"></a></p><h3 id="2、元注解"><a href="#2、元注解" class="headerlink" title="2、元注解"></a>2、元注解</h3><p>元注解可以修饰注解，是注解的注解，叫做元注解；</p><h4 id="2-1、-Retention"><a href="#2-1、-Retention" class="headerlink" title="2.1、@Retention"></a>2.1、@Retention</h4><p>作用:需要在什么级别保存该注释信息，用于描述注解的声明周期。<br>在修饰注解的时候，我们通常这样用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br></pre></td></tr></table></figure></p><p>其中，注解@Retention有一个属性value，是RetentionPolicy类型的；RetentionPolicy有三个值，分别为：CLASS、RUNTIME、SOURCE;<br>按照声明周期划分为三类：<br>①、RetentionPolicy.SOURCE:注解只保留在源文件，当Java文件编译成.class文件的时候，注解被遗弃；<br>②、RetentionPolicy.CLASS:注解被保留到.class文件中，但是JVM加载.class文件的时候被遗弃，这是默认的生命周期；<br>③、RetentionPolicy.RUNTIME:注解不仅被保留到.class文件中，JVM加载.class文件之后，仍然存在。</p><h4 id="2-2-Target"><a href="#2-2-Target" class="headerlink" title="2.2 @Target"></a>2.2 @Target</h4><p>作用:用于描述注解的使用范围。<br>下面是部分源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，ElementType的取值有：TYPE、FIELD、METHOD等;下面是ElementType的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The constants of this enumerated type provide a simple classification of the</span></span><br><span class="line"><span class="comment"> * syntactic locations where annotations may appear in a Java program. These</span></span><br><span class="line"><span class="comment"> * constants are used in &#123;<span class="doctag">@link</span> Target java.lang.annotation.Target&#125;</span></span><br><span class="line"><span class="comment"> * meta-annotations to specify where it is legal to write annotations of a</span></span><br><span class="line"><span class="comment"> * given type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The syntactic locations where annotations may appear are split into</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;declaration contexts&lt;/em&gt; , where annotations apply to declarations, and</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;type contexts&lt;/em&gt; , where annotations apply to types used in</span></span><br><span class="line"><span class="comment"> * declarations and expressions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The constants &#123;<span class="doctag">@link</span> #ANNOTATION_TYPE&#125; , &#123;<span class="doctag">@link</span> #CONSTRUCTOR&#125; , &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #FIELD&#125; , &#123;<span class="doctag">@link</span> #LOCAL_VARIABLE&#125; , &#123;<span class="doctag">@link</span> #METHOD&#125; , &#123;<span class="doctag">@link</span> #PACKAGE&#125; ,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #PARAMETER&#125; , &#123;<span class="doctag">@link</span> #TYPE&#125; , and &#123;<span class="doctag">@link</span> #TYPE_PARAMETER&#125; correspond</span></span><br><span class="line"><span class="comment"> * to the declaration contexts in JLS 9.6.4.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, an annotation whose type is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.FIELD)&#125; may only be written as a modifier for a</span></span><br><span class="line"><span class="comment"> * field declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The constant &#123;<span class="doctag">@link</span> #TYPE_USE&#125; corresponds to the 15 type contexts in JLS</span></span><br><span class="line"><span class="comment"> * 4.11, as well as to two declaration contexts: type declarations (including</span></span><br><span class="line"><span class="comment"> * annotation type declarations) and type parameter declarations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, an annotation whose type is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.TYPE_USE)&#125; may be written on the type of a field</span></span><br><span class="line"><span class="comment"> * (or within the type of the field, if it is a nested, parameterized, or array</span></span><br><span class="line"><span class="comment"> * type), and may also appear as a modifier for, say, a class declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The &#123;<span class="doctag">@code</span> TYPE_USE&#125; constant includes type declarations and type</span></span><br><span class="line"><span class="comment"> * parameter declarations as a convenience for designers of type checkers which</span></span><br><span class="line"><span class="comment"> * give semantics to annotation types. For example, if the annotation type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> NonNull&#125; is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.TYPE_USE)&#125;, then &#123;<span class="doctag">@code</span> <span class="doctag">@NonNull</span>&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> class C &#123;...&#125;&#125; could be treated by a type checker as indicating that</span></span><br><span class="line"><span class="comment"> * all variables of class &#123;<span class="doctag">@code</span> C&#125; are non-null, while still allowing</span></span><br><span class="line"><span class="comment"> * variables of other classes to be non-null or not non-null based on whether</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@NonNull</span>&#125; appears at the variable's declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.4.1 <span class="doctag">@Target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.1 The Kinds of Types and Values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TYPE_PARAMETER和TYPE_USE是1.8版本有的；<br>其中，</p><ul><li>TYPE:类、接口（包括注解类型）和枚举类型的声明；</li><li>FIELD:字段声明（包括枚举常量）；</li><li>METHOD:方法声明；</li><li>PARMETER:参数声明；</li><li>CONSTRUCTOR:构造函数声明；</li><li>LOCAL_VARIABLE: 本地变量声明；</li><li>ANNOTATION_TYPE:注解类型声明；</li><li>PACKAGE:包声明；</li><li>TYPE_PARAMETER:类型参数声明，类的泛型声明；</li><li>TYPE_USE:包括类型声明和类型参数声明，方便进行类型检查；（还没有试过）；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h3&gt;&lt;p&gt;1.1、开发过程中，遇到一些元注解或者常见的注解，本笔记记录一下这些注解的作用以及部分注解的原理。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://youxiu.net/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>开发中的解耦与复用</title>
    <link href="https://youxiu.net/2019/03/22/51cf8560-d04b-4fbd-a04b-d40cc261ca36/"/>
    <id>https://youxiu.net/2019/03/22/51cf8560-d04b-4fbd-a04b-d40cc261ca36/</id>
    <published>2019-03-22T02:55:15.000Z</published>
    <updated>2019-03-26T10:08:25.636Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>在设计<b>微服务</b>模式的开发系统的时候，按照实际的划分规则进行模块区分，注册中心、网关、权限校验、字段服务、链路追踪、日志管理等等，还需要将共用的类或者接口单独取出来，放到一个模块中。<br><a id="more"></a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、公共的类，汇总到一起<br>2、引入的依赖、.jar包，考虑是否放到公共类中进行复用</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;p&gt;在设计&lt;b&gt;微服务&lt;/b&gt;模式的开发系统的时候，按照实际的划分规则进行模块区分，注册中心、网关、权限校验、字段服务、链路追踪、日志管理等等，还需要将共用的类或者接口单独取出来，放到一个模块中。&lt;br&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://youxiu.net/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud核心组件笔记</title>
    <link href="https://youxiu.net/2019/03/18/d27015fb-408b-4e82-9827-ec8d7acdd75d/"/>
    <id>https://youxiu.net/2019/03/18/d27015fb-408b-4e82-9827-ec8d7acdd75d/</id>
    <published>2019-03-18T06:20:54.000Z</published>
    <updated>2019-03-26T07:15:39.311Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概要"><a href="#1、概要" class="headerlink" title="1、概要"></a>1、概要</h3><p>学习微服务模式开发，记录一下对每个组件的理解和笔记；不断按照最新的理解进行修改并补充。本文笔记的Spring Cloud的核心组件包括：Eureka、Ribbon、Zuul、Hystrix、Feign组件。<br><a id="more"></a></p><h3 id="2、Eureka"><a href="#2、Eureka" class="headerlink" title="2、Eureka"></a>2、Eureka</h3><ul><li>Eureka Server:注册中心，里面有一个注册表，保存了各个服务所在的机器和端口号；</li><li>Eureka Client:负责将这个服务的信息注册到Eureka Server中；</li></ul><h3 id="3、Feign"><a href="#3、Feign" class="headerlink" title="3、Feign"></a>3、Feign</h3><ul><li>例如，订单模块调用积分模块，现在订单模块已经知道了积分模块的地址和端口号了。发出请求就需要借助Feign；</li><li>Feign根据指定的服务进行建立链接、构造请求、发起请求、获取响应、解析响应等；</li><li>上述的操作，Feign的一个机制：动态代理；</li></ul><h3 id="4、Ribbon"><a href="#4、Ribbon" class="headerlink" title="4、Ribbon"></a>4、Ribbon</h3><ul><li>服务模块有了地址、端口、和建立连接请求的条件，如果存在多个同行服务在不同机器上，比如：<ul><li>172.1.16.58:9000</li><li>172.1.16.59:9000</li><li>172.1.16.60:9000</li><li>172.1.16.61:9000</li></ul></li><li>Ribbon的作用是负载均衡。每次请求的时候，会通过不同的算法均匀的将请求分发到各个服务上；</li><li>Ribbon会从Eureka Client获取到对应的服务注册表，相对应的知道了服务部署的地址和监听的端口；</li><li>Ribbon可以使用默认的轮询算法，从其中选择一台机器；</li><li>Feign就会针对Ribbon选中的这台机器，进行下一步动作；</li><li>Feign默认是带有Ribbon的依赖的，开发的时候不需要单独引入；</li></ul><h3 id="5、Hystrix"><a href="#5、Hystrix" class="headerlink" title="5、Hystrix"></a>5、Hystrix</h3><ul><li>熔断机制。隔离、熔断、降级；Hystrix会生成很多小的线程池，比如订单的试一个线程池、积分是一个线程池；每个线程池中仅仅用于请求的服务；</li><li>即使积分服务挂掉，订单服务的线程池是正常的，仍旧可以工作，不会受到影响；</li><li>熔断：积分服务挂掉的话，设置时间5分钟内够来的请求直接返回；</li><li>降级：需要对某用户的积分进行操作，但是积分服务挂掉没办法进行。这时候可以设计一个专门存放故障的数据库；来记录对这个用户的积分操作是什么样子的。等积分服务恢复之后，可以手动还原回去；</li></ul><h3 id="6、Zuul"><a href="#6、Zuul" class="headerlink" title="6、Zuul"></a>6、Zuul</h3><ul><li>使用了一个网关，不需要关心后端有多少个微服务，只需要知道网关的地址即可。所有的请求都请过网关进行处理；</li><li>好处：可以做统一的降级、限流、认证授权等；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概要&quot;&gt;&lt;a href=&quot;#1、概要&quot; class=&quot;headerlink&quot; title=&quot;1、概要&quot;&gt;&lt;/a&gt;1、概要&lt;/h3&gt;&lt;p&gt;学习微服务模式开发，记录一下对每个组件的理解和笔记；不断按照最新的理解进行修改并补充。本文笔记的Spring Cloud的核心组件包括：Eureka、Ribbon、Zuul、Hystrix、Feign组件。&lt;br&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://youxiu.net/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis映射文件中的注意事项</title>
    <link href="https://youxiu.net/2019/03/15/64e17dff-f1e7-4527-a12c-8f7e5bd1e064/"/>
    <id>https://youxiu.net/2019/03/15/64e17dff-f1e7-4527-a12c-8f7e5bd1e064/</id>
    <published>2019-03-15T05:20:28.000Z</published>
    <updated>2019-03-15T05:22:24.124Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概要"><a href="#1、概要" class="headerlink" title="1、概要"></a>1、概要</h3><p>在写MyBatis的xml映射文件的时候，有一些需要注意的点：<br><a id="more"></a></p><h3 id="2、具体内容："><a href="#2、具体内容：" class="headerlink" title="2、具体内容："></a>2、具体内容：</h3><ul><li>ResultMap中子标签<code>&lt;result/&gt;</code>标签中的<code>property</code>和<code>column</code>对应字段必须所在的<code>entity</code>实体类中；</li><li>如果<code>entity</code>实体类中存在，但是没有写在<code>ResultMap</code>中，则不显示；</li><li><code>&lt;if&gt;</code>标签中存在<code>if</code>条件，如果外层关联过许多表的话，查询出的数据结果集可能会用重复，因此，限制条件必须要放到外层，而不是写在<code>&lt;if&gt;</code>标签中；</li><li>在<code>Navicate</code>中的<code>union all</code>语句是能够正确查询的，但是放到<code>mapper</code>映射文件中，需要加一层，<code>select a.* from (...) a</code>；</li><li>MyBatis中不支持通常写法的大于号和小于号，这里需要转义：大于号：<code>&amp;gt;</code>，小于号：<code>&amp;lt;</code>；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概要&quot;&gt;&lt;a href=&quot;#1、概要&quot; class=&quot;headerlink&quot; title=&quot;1、概要&quot;&gt;&lt;/a&gt;1、概要&lt;/h3&gt;&lt;p&gt;在写MyBatis的xml映射文件的时候，有一些需要注意的点：&lt;br&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://youxiu.net/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记及理解(不断补充)</title>
    <link href="https://youxiu.net/2019/03/12/517e01df-a412-4fb6-8386-9d91574035f6/"/>
    <id>https://youxiu.net/2019/03/12/517e01df-a412-4fb6-8386-9d91574035f6/</id>
    <published>2019-03-12T02:46:41.000Z</published>
    <updated>2019-03-14T09:22:08.660Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概要"><a href="#1、概要" class="headerlink" title="1、概要"></a>1、概要</h3><p>作为团队开发的一项重要利器，使用好Git是一件重要的事情；提高协作效率，节约协作时间。<br><a id="more"></a></p><h3 id="2、基础知识"><a href="#2、基础知识" class="headerlink" title="2、基础知识"></a>2、基础知识</h3><h4 id="2-1-环境的搭建"><a href="#2-1-环境的搭建" class="headerlink" title="2.1 环境的搭建"></a>2.1 环境的搭建</h4><h4 id="2-2-推送第一个文件至GitHub代码仓库"><a href="#2-2-推送第一个文件至GitHub代码仓库" class="headerlink" title="2.2 推送第一个文件至GitHub代码仓库"></a>2.2 推送第一个文件至GitHub代码仓库</h4><h4 id="2-3-原理"><a href="#2-3-原理" class="headerlink" title="2.3 原理"></a>2.3 原理</h4><h3 id="3、命令行维护"><a href="#3、命令行维护" class="headerlink" title="3、命令行维护"></a>3、命令行维护</h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概要&quot;&gt;&lt;a href=&quot;#1、概要&quot; class=&quot;headerlink&quot; title=&quot;1、概要&quot;&gt;&lt;/a&gt;1、概要&lt;/h3&gt;&lt;p&gt;作为团队开发的一项重要利器，使用好Git是一件重要的事情；提高协作效率，节约协作时间。&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://youxiu.net/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>开发规范笔记</title>
    <link href="https://youxiu.net/2019/03/07/16d9fb52-dd5b-4339-9b38-a98df48a8b46/"/>
    <id>https://youxiu.net/2019/03/07/16d9fb52-dd5b-4339-9b38-a98df48a8b46/</id>
    <published>2019-03-07T08:59:03.000Z</published>
    <updated>2019-03-22T10:32:44.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>日常开发中，虽然代码可用性通过，要求的功能实现了，但是有一些规范需要去遵守；避免不注意犯了一些低级错误；本文笔记梳理一些常忽略的点，以免下次再进坑；<br><a id="more"></a><br>1、公共类中的方法最好不要动；<br>2、uuid要谨慎使用；<br>3、公共的方法要放到公共的类中；<br>4、业务类的方法比较多，取名字要规范一些，长点不要紧，但是一定要读出来方法的作用是什么；如果表达不出来，加上必要的注释；<br>5、尽量不要捕获类似Exception通用异常，而是捕获特定的异常，具体到哪一种子类型；<br>6、在复杂的生产系统中，标准出错STERR不是合适的输出选项，尤其是分布式系统，最好使用产品日志；详细的输出到日志系统中；STREE无法找到堆栈轨迹；<br>不要在<b>catch</b>代码块中直接<a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#printStackTrace--" target="_blank" rel="noopener">printStackTrace()</a><br>7、[配置文件]在微服务的resources下的配置文件，可能会有许多的配置文件，每个配置文件尽量要求做到名字直观易懂，必要时在配置文件中做出单独的说明；</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;p&gt;日常开发中，虽然代码可用性通过，要求的功能实现了，但是有一些规范需要去遵守；避免不注意犯了一些低级错误；本文笔记梳理一些常忽略的点，以免下次再进坑；&lt;br&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://youxiu.net/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>前后端开发中对数据类型的理解和笔记</title>
    <link href="https://youxiu.net/2019/03/07/f34c66e6-28df-4cc4-bac1-ac4e0cf6bb6a/"/>
    <id>https://youxiu.net/2019/03/07/f34c66e6-28df-4cc4-bac1-ac4e0cf6bb6a/</id>
    <published>2019-03-07T07:55:31.000Z</published>
    <updated>2019-03-14T09:22:22.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概要"><a href="#1、概要" class="headerlink" title="1、概要"></a>1、概要</h3><p>总结一下基础知识，关于最近前后端的开发中，对基础知识点的理解和重新认识；主要包括Java的List/Map、以及JSON格式的数据与数组转换的总结；<br><a id="more"></a></p><h3 id="2、背景"><a href="#2、背景" class="headerlink" title="2、背景"></a>2、背景</h3><p>首先根据开发中的两个需求，描述记录；<br>1、在EHR系统开发中，对员工的特种作业证书进行筛选统计，筛选规则：将同一证书类型、同一证书名字、同一登记时间的，取变动时间最新的一条数据展示；<br>2、前台报表显示列项目，前端Vue使用ElementUI的穿梭器实现；用户可以[自定义显示]要显示的列项目；每个用户的设置不一样；</p><h3 id="3、EHR中的解决描述记录"><a href="#3、EHR中的解决描述记录" class="headerlink" title="3、EHR中的解决描述记录"></a>3、EHR中的解决描述记录</h3><h5 id="3-1-思路和具体实现"><a href="#3-1-思路和具体实现" class="headerlink" title="3.1 思路和具体实现"></a>3.1 思路和具体实现</h5><p>员工的特种证书表中，冗余的数据太多，维护的太乱，一个证书可能有多次变动时间；数据的来源是从SAP生产800数据库中拉取过来，最新的记录没有标记；为了取数准确，每为员工的数据分两步取数：<br>1、先取出<b>不包括</b>在【同一证书名称、类型、登记时间】这个条件的数据。用<b>GROUP BY</b>分组语句查询出来；<br>2、再取出范围在【同一证书名称、类型、登记时间】这个条件的数据；<br>看下表结构（仅仅罗列了关键的字段）：</p><table><thead><tr><th>字段名称</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>employee_special_uuid</td><td>varchar</td><td>uuid</td></tr><tr><td>employee_id</td><td>varchar</td><td>员工ID</td></tr><tr><td>special_operations_type</td><td>varchar</td><td>证书类型</td></tr><tr><td>special_operations_project</td><td>varchar</td><td>证书项目（名字）</td></tr><tr><td>special_operations_record_date</td><td>date</td><td>登记日期</td></tr><tr><td>sp_begin_date</td><td>date</td><td>变动日期</td></tr><tr><td>sp_end_date</td><td>date</td><td>结束日期</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line"> t.employee_id  ,</span><br><span class="line"> t.special_operations_type  ,</span><br><span class="line"> t.special_operations_project  ,</span><br><span class="line"> t.special_operations_cert_code  ,</span><br><span class="line"> t.special_operations_cert_date  ,</span><br><span class="line"> t.special_operations_cert_end_date  ,</span><br><span class="line"> t.special_operations_expire_date  ,</span><br><span class="line"> t.special_operations_part_time  ,</span><br><span class="line"> t.special_operations_status  ,</span><br><span class="line"> t.special_operations_record_date  ,</span><br><span class="line"> t.employee_special_uuid  ,</span><br><span class="line"> t.special_operations_status_text  ,</span><br><span class="line"> t.special_operations_part_time_text  ,</span><br><span class="line"> t.special_operations_cert_org  ,</span><br><span class="line"> t.special_operations_type_text  ,</span><br><span class="line"> t.special_operations_project_text  ,</span><br><span class="line"> t.sp_remark  ,</span><br><span class="line"> t.sp_begin_date  ,</span><br><span class="line"> t.sp_end_date</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">(t.special_operations_type IN(</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">t.special_operations_type</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">GROUP BY</span><br><span class="line">t.special_operations_type</span><br><span class="line">HAVING</span><br><span class="line">count(t.special_operations_type) = 1</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">or t.special_operations_project IN(</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">t.special_operations_project</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">GROUP BY</span><br><span class="line">t.special_operations_project</span><br><span class="line">HAVING</span><br><span class="line">count(t.special_operations_project) = 1</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">or t.special_operations_record_date IN(</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">t.special_operations_record_date</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">GROUP BY</span><br><span class="line">t.special_operations_record_date</span><br><span class="line">HAVING</span><br><span class="line">count(t.special_operations_record_date) = 1</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">AND t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">group by </span><br><span class="line"> t.employee_id  ,</span><br><span class="line"> t.special_operations_type  ,</span><br><span class="line"> t.special_operations_project  ,</span><br><span class="line"> t.special_operations_cert_code  ,</span><br><span class="line"> t.special_operations_cert_date  ,</span><br><span class="line"> t.special_operations_cert_end_date  ,</span><br><span class="line"> t.special_operations_expire_date  ,</span><br><span class="line"> t.special_operations_part_time ,</span><br><span class="line"> t.special_operations_status  ,</span><br><span class="line"> t.special_operations_record_date  ,</span><br><span class="line"> t.employee_special_uuid  ,</span><br><span class="line"> t.special_operations_status_text  ,</span><br><span class="line"> t.special_operations_part_time_text  ,</span><br><span class="line"> t.special_operations_cert_org  ,</span><br><span class="line"> t.special_operations_type_text  ,</span><br><span class="line"> t.special_operations_project_text  ,</span><br><span class="line"> t.sp_remark  ,</span><br><span class="line"> t.sp_begin_date  ,</span><br><span class="line"> t.sp_end_date</span><br><span class="line"></span><br><span class="line">order by t.sp_begin_date desc</span><br></pre></td></tr></table></figure><p>上述语句能够将<b>不包括</b>在【同一证书名称、类型、登记时间】这个条件的数据。<b>GROUP BY</b>的用法不记录笔记；<br><b>取出范围在【同一证书名称、类型、登记时间】这个条件的数据</b>只要稍微改动一下查询条件即可，这样，先把要求的数据集先取出来，然后在通过Java代码去处理List即可；<br><b>最后一个order by t.sp_begin_date desc其实用处很大的，group by已经分组了，然后将最新的时间排在了结果集的最上面，对于后边的List处理起到了很方便的作用；</b><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line"> t.employee_id  ,</span><br><span class="line"> t.special_operations_type  ,</span><br><span class="line"> t.special_operations_project  ,</span><br><span class="line"> t.special_operations_cert_code  ,</span><br><span class="line"> t.special_operations_cert_date  ,</span><br><span class="line"> t.special_operations_cert_end_date  ,</span><br><span class="line"> t.special_operations_expire_date  ,</span><br><span class="line"> t.special_operations_part_time  ,</span><br><span class="line"> t.special_operations_status  ,</span><br><span class="line"> t.special_operations_record_date  ,</span><br><span class="line"> t.employee_special_uuid  ,</span><br><span class="line"> t.special_operations_status_text  ,</span><br><span class="line"> t.special_operations_part_time_text  ,</span><br><span class="line"> t.special_operations_cert_org  ,</span><br><span class="line"> t.special_operations_type_text  ,</span><br><span class="line"> t.special_operations_project_text  ,</span><br><span class="line"> t.sp_remark  ,</span><br><span class="line"> t.sp_begin_date  ,</span><br><span class="line"> t.sp_end_date</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">(t.special_operations_type IN(</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">t.special_operations_type</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">GROUP BY</span><br><span class="line">t.special_operations_type</span><br><span class="line">HAVING</span><br><span class="line">count(t.special_operations_type) &gt; 1</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">and t.special_operations_project IN(</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">t.special_operations_project</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">GROUP BY</span><br><span class="line">t.special_operations_project</span><br><span class="line">HAVING</span><br><span class="line">count(t.special_operations_project) &gt; 1</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">and t.special_operations_record_date IN(</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">t.special_operations_record_date</span><br><span class="line">FROM</span><br><span class="line">m_special_operations t</span><br><span class="line">WHERE</span><br><span class="line">t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">GROUP BY</span><br><span class="line">t.special_operations_record_date</span><br><span class="line">HAVING</span><br><span class="line">count(t.special_operations_record_date) &gt; 1</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">AND t.employee_id = #&#123;employeeId&#125;</span><br><span class="line">AND t.special_operations_status = '01'</span><br><span class="line">group by </span><br><span class="line"> t.employee_id  ,</span><br><span class="line"> t.special_operations_type  ,</span><br><span class="line"> t.special_operations_project  ,</span><br><span class="line"> t.special_operations_cert_code  ,</span><br><span class="line"> t.special_operations_cert_date  ,</span><br><span class="line"> t.special_operations_cert_end_date  ,</span><br><span class="line"> t.special_operations_expire_date  ,</span><br><span class="line"> t.special_operations_part_time ,</span><br><span class="line"> t.special_operations_status  ,</span><br><span class="line"> t.special_operations_record_date  ,</span><br><span class="line"> t.employee_special_uuid  ,</span><br><span class="line"> t.special_operations_status_text  ,</span><br><span class="line"> t.special_operations_part_time_text  ,</span><br><span class="line"> t.special_operations_cert_org  ,</span><br><span class="line"> t.special_operations_type_text  ,</span><br><span class="line"> t.special_operations_project_text  ,</span><br><span class="line"> t.sp_remark  ,</span><br><span class="line"> t.sp_begin_date  ,</span><br><span class="line"> t.sp_end_date</span><br><span class="line"></span><br><span class="line">order by t.sp_begin_date desc</span><br></pre></td></tr></table></figure></p><h5 id="3-2-Java代码的实现；"><a href="#3-2-Java代码的实现；" class="headerlink" title="3.2 Java代码的实现；"></a>3.2 Java代码的实现；</h5><p>先放上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取资质信息（1、职称信息 2、职业资格 3、特种证书）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeeId</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/getPostionTitleData/&#123;employeeId&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ObjectRestResponse <span class="title">getPostionTitleData</span><span class="params">(@PathVariable String employeeId)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;MPostionTitle&gt; list1 = mPostionTitleBiz.selectPostionTitleByEmpId(employeeId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 职业资格重复的记录</span></span><br><span class="line">    List&lt;MProQualifications&gt; mProQualificationsList = mProQualificationsBiz.selectProQuaById(employeeId);</span><br><span class="line">    <span class="comment">// 职业资格不重复的记录；</span></span><br><span class="line">    List&lt;MProQualifications&gt; notRepeatMpqList = mProQualificationsBiz.selectMProQuaNotRepeat(employeeId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特种证书重复的记录</span></span><br><span class="line">    List&lt;MSpecialOperations&gt; mSpecialOperationsList = mSpecialOperationsBiz.selectSpecOperationById(employeeId);</span><br><span class="line">    <span class="comment">// 特种证书不重复的记录</span></span><br><span class="line">    List&lt;MSpecialOperations&gt; notRepeatMsoList = mSpecialOperationsBiz.selectSpecOPerationNotRepeat(employeeId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理职业资格重复的记录；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mProQualificationsList.size() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">if</span> (mProQualificationsList.get(i).getEmployeeProType().equals(mProQualificationsList.get(i + <span class="number">1</span>))</span><br><span class="line">                &amp;&amp; mProQualificationsList.get(i).getEmployeeProLevel().equals(mProQualificationsList.get(i + <span class="number">1</span>))</span><br><span class="line">                &amp;&amp; mProQualificationsList.get(i).getEmployeeProDate().equals(mProQualificationsList.get(i + <span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mProQualificationsList.get(i).getEmployeeProDate().getTime() &gt; mProQualificationsList.get(i + <span class="number">1</span>).getEmployeeProDate().getTime()) &#123;</span><br><span class="line">                mProQualificationsList.set((i + <span class="number">1</span>), mProQualificationsList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去除重复的记录</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mProQualificationsList.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = mProQualificationsList.size() - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            mProQualificationsList.remove(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mProQualificationsList.addAll(notRepeatMpqList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理特种证书重复的记录；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSpecialOperationsList.size() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">if</span> (mSpecialOperationsList.get(i).getSpecialOperationsType().equals(mSpecialOperationsList.get(i + <span class="number">1</span>).getSpecialOperationsType())</span><br><span class="line">                &amp;&amp; mSpecialOperationsList.get(i).getSpecialOperationsProject().equals(mSpecialOperationsList.get(i + <span class="number">1</span>).getSpecialOperationsProject())</span><br><span class="line">                &amp;&amp; mSpecialOperationsList.get(i).getSpecialOperationsRecordDate().equals(mSpecialOperationsList.get(i + <span class="number">1</span>).getSpecialOperationsRecordDate())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSpecialOperationsList.get(i).getSpBeginDate().getTime() &gt; mSpecialOperationsList.get(i + <span class="number">1</span>).getSpBeginDate().getTime()) &#123;</span><br><span class="line">                mSpecialOperationsList.set((i + <span class="number">1</span>), mSpecialOperationsList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去除重复的msList</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSpecialOperationsList.size() - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = mSpecialOperationsList.size() - <span class="number">1</span>;j &gt; i; j-- ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSpecialOperationsList.get(i).equals(mSpecialOperationsList.get(j))) &#123;</span><br><span class="line">                mSpecialOperationsList.remove(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mSpecialOperationsList.addAll(notRepeatMsoList);</span><br><span class="line"></span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"titleData"</span>, list1);</span><br><span class="line">    map.put(<span class="string">"proQualificationsData"</span>, mProQualificationsList);</span><br><span class="line">    map.put(<span class="string">"specialWorkData"</span>, mSpecialOperationsList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ObjectRestResponse().data(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>拿特种证书来说，用for()循环，将List循环，for()的作用是将List中的元素全部设置为同一个元素，if条件语句是限定第i个元素和i+1个元素，如果相同，则是一样的，将i+1个元素设置为跟i一样，刚才上面说了，<b>最后一个order by t.sp_begin_date desc其实用处很大的，group by已经分组了，然后将最新的时间排在了结果集的最上面，对于List处理起到了很方便的作用；</b>处理之后的list，数据永远是符合要求的那一条；</p><p>第二个for()循环的作用是出去list的重复值，其实只留下一个即可；用for()一个一个的remove()处理掉；这样剩余的就符合条件了；</p><h3 id="4、前台报表列显示与隐藏实现"><a href="#4、前台报表列显示与隐藏实现" class="headerlink" title="4、前台报表列显示与隐藏实现"></a>4、前台报表列显示与隐藏实现</h3><h5 id="4-1-思路和具体实现"><a href="#4-1-思路和具体实现" class="headerlink" title="4.1 思路和具体实现"></a>4.1 思路和具体实现</h5><p>前台之前是用mock模拟实现的，这是存储的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">saveColumnSetting: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  localStorage.setItem(<span class="string">'columns'</span>, <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(config.body).columns))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这是mock5'</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>存储到了localStorage中，如果浏览器清除缓存了，或者用户使用了另一个浏览器登录或者其他的电脑的登录，这个配置就会失效；<br>这是用户打开页面加载的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">const</span> model = <span class="string">'projectApply'</span>;</span><br><span class="line">  getColumnSetting(model).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response &amp;&amp; response.length) &#123;</span><br><span class="line">      <span class="keyword">this</span>.columns = response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取也是从localStorage中获取：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getColumnSetting: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">data</span>: <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'columns'</span>)) &#125;)</span><br></pre></td></tr></table></figure></p><p>这是向后传递的时候，调用的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">changeColumnWidth(newWidth, oldWidth, column) &#123;</span><br><span class="line">  <span class="keyword">this</span>.columns.forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (el.code === column.property) &#123;</span><br><span class="line">      el.width = newWidth</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  saveColumnSetting(&#123; <span class="attr">module</span>: <span class="keyword">this</span>.module, <span class="attr">columns</span>: <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.columns) &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>data的内容是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">module</span>: <span class="keyword">this</span>.module, <span class="attr">columns</span>: <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.columns) &#125;</span><br></pre></td></tr></table></figure></p><p>其中用到了<b>JSON.stringify()</b>函数，将数组转换成JSON的格式，存储到后端的columns字段中；<br>这是接口，函数传递过来的是data：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveColumnSetting</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/crm/mdColumnsShow/saveColumnSetting'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>this.columns</b>是一个数组，可以使用forEach箭头函数将其遍历；<br>那就需要将这部分的配置，存储到数据库中，下面是存储的表结构：</p><table><thead><tr><th>字段名称</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>varchar</td><td>uuid</td></tr><tr><td>module</td><td>varchar</td><td>模块名称</td></tr><tr><td>user_id</td><td>varchar</td><td>用户Id</td></tr><tr><td>user_name</td><td>varchar</td><td>用户名字</td></tr><tr><td>columns</td><td>date</td><td>列的配置</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结上述的过程，操作List;</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概要&quot;&gt;&lt;a href=&quot;#1、概要&quot; class=&quot;headerlink&quot; title=&quot;1、概要&quot;&gt;&lt;/a&gt;1、概要&lt;/h3&gt;&lt;p&gt;总结一下基础知识，关于最近前后端的开发中，对基础知识点的理解和重新认识；主要包括Java的List/Map、以及JSON格式的数据与数组转换的总结；&lt;br&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://youxiu.net/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常见问题及优化</title>
    <link href="https://youxiu.net/2019/01/26/5a626726-4e1c-41ae-b704-8e4331860a5a/"/>
    <id>https://youxiu.net/2019/01/26/5a626726-4e1c-41ae-b704-8e4331860a5a/</id>
    <published>2019-01-26T03:35:45.000Z</published>
    <updated>2019-03-15T05:55:38.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL的优化方案有哪一些？"><a href="#MySQL的优化方案有哪一些？" class="headerlink" title="MySQL的优化方案有哪一些？"></a>MySQL的优化方案有哪一些？</h2><p>本文介绍一下优化SQL语句和优化索引。</p><h3 id="本文记录MySQL-本文梗概如下"><a href="#本文记录MySQL-本文梗概如下" class="headerlink" title="本文记录MySQL 本文梗概如下:"></a>本文记录MySQL 本文梗概如下:</h3><ul><li>优化SQL</li><li>优化索引</li><li>开启查询缓存<a id="more"></a></li><li>配合使用Redis</li><li>MySQL主从复制</li><li>优化MySQL自带的分区表</li><li>垂直拆分,分解大系统,成为小系统,分布式系统</li><li>水平拆分</li><li>硬件上的升级、存储引擎、MySQL本身的配置文件</li></ul><h2 id="（一）优化SQL"><a href="#（一）优化SQL" class="headerlink" title="（一）优化SQL"></a>（一）优化SQL</h2><h4 id="1、通过MySQL自有的优化语句"><a href="#1、通过MySQL自有的优化语句" class="headerlink" title="1、通过MySQL自有的优化语句"></a>1、通过MySQL自有的优化语句</h4><p>优化SQL语句，通过脚本命令来了解执行率较低的语句，显示一下状态等。</p><ul><li>SHOW命令<ul><li>SHOW Status可以了解SQL的执行频率。可以显示日志，显示特定的数据库、表、索引以及进程还有权限表中的信息等等。<br>介绍一些常见的字段</li><li>Innodb_rows_read:Select查询返回的行数。</li><li>Innodb_rows_inserted:执行INSERT操作插入的行数。</li><li>Innodb_rows_updated:执行UPDATE操作更新的行数。</li><li>Innodb_rows_deleted:执行DELETE操作删除的行数。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySQL的优化方案有哪一些？&quot;&gt;&lt;a href=&quot;#MySQL的优化方案有哪一些？&quot; class=&quot;headerlink&quot; title=&quot;MySQL的优化方案有哪一些？&quot;&gt;&lt;/a&gt;MySQL的优化方案有哪一些？&lt;/h2&gt;&lt;p&gt;本文介绍一下优化SQL语句和优化索引。&lt;/p&gt;
&lt;h3 id=&quot;本文记录MySQL-本文梗概如下&quot;&gt;&lt;a href=&quot;#本文记录MySQL-本文梗概如下&quot; class=&quot;headerlink&quot; title=&quot;本文记录MySQL 本文梗概如下:&quot;&gt;&lt;/a&gt;本文记录MySQL 本文梗概如下:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优化SQL&lt;/li&gt;
&lt;li&gt;优化索引&lt;/li&gt;
&lt;li&gt;开启查询缓存
    
    </summary>
    
    
      <category term="MySQL" scheme="https://youxiu.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis语法总结</title>
    <link href="https://youxiu.net/2019/01/02/9ec1b26b-333e-4b8c-875c-4c20d6be8d9f/"/>
    <id>https://youxiu.net/2019/01/02/9ec1b26b-333e-4b8c-875c-4c20d6be8d9f/</id>
    <published>2019-01-02T10:09:31.000Z</published>
    <updated>2019-03-22T10:33:23.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><ul><li>MyBatis在一些情况下，与在MySQL里面直接查询两者的运行情况（此处无关结果集）不一定是一样的，有些语句在MyBatis中运行是报错的。<a id="more"></a></li></ul><h3 id="2、MyBatis中的标签"><a href="#2、MyBatis中的标签" class="headerlink" title="2、MyBatis中的标签"></a>2、MyBatis中的<where></where>标签</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MyBatis在一些情况下，与在MySQL里面直接查询两者的运行情况（此处无关结果集）不一定是一样的，有些语句在MyBatis中运行是报错的。
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://youxiu.net/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>前端后端数据交互过程例解与调试</title>
    <link href="https://youxiu.net/2018/12/29/205380c3-c733-4f1b-ba14-9bc6274e63ab/"/>
    <id>https://youxiu.net/2018/12/29/205380c3-c733-4f1b-ba14-9bc6274e63ab/</id>
    <published>2018-12-29T06:53:48.000Z</published>
    <updated>2019-03-27T02:23:17.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>前后端分离项目进行数据交互的时候，出现错误改如何快速定位调试。<br><a id="more"></a></p><h3 id="2、前后交互数据的过程"><a href="#2、前后交互数据的过程" class="headerlink" title="2、前后交互数据的过程"></a>2、前后交互数据的过程</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h3&gt;&lt;p&gt;前后端分离项目进行数据交互的时候，出现错误改如何快速定位调试。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://youxiu.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>方案解决与思路提示</title>
    <link href="https://youxiu.net/2018/12/25/c03038cf-42d9-4b76-bb2f-9a6a5a8e719c/"/>
    <id>https://youxiu.net/2018/12/25/c03038cf-42d9-4b76-bb2f-9a6a5a8e719c/</id>
    <published>2018-12-25T12:08:43.000Z</published>
    <updated>2019-03-22T10:35:52.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>旨在积累一些问题的解决方案和思路，下次出现快速解决。少走弯路；提高效率。<br><a id="more"></a></p><h3 id="2、微服务分机部署"><a href="#2、微服务分机部署" class="headerlink" title="2、微服务分机部署"></a>2、微服务分机部署</h3><ul><li>分机部署，如果是不同服务商的服务器，加载速度会变得很慢。可以使用CDN加速。即使是同一个运营商不同地域的，也会这样。</li><li>记得开放端口和设置安全组规则（比如阿里云的），想当于设置白名单。</li><li>微服务的占用性能比较大，如果在出现线程被自动kill的现象，要即使查看是不是内存不足导致，从而出发了kill最大内存的进程。</li></ul><h3 id="3、整理自己的资料"><a href="#3、整理自己的资料" class="headerlink" title="3、整理自己的资料"></a>3、整理自己的资料</h3><ul><li>学会使用标签。</li><li>Notes是个好东西。</li><li>之后每份重要的文件都要放上标签，便于查找。</li><li>自己的资料库要形成索引。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h3&gt;&lt;p&gt;旨在积累一些问题的解决方案和思路，下次出现快速解决。少走弯路；提高效率。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://youxiu.net/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>EHR系统员工生日提醒（跨年查询）总结与笔记</title>
    <link href="https://youxiu.net/2018/12/19/81e30f7a-a061-4cfb-aace-39fdf4860955/"/>
    <id>https://youxiu.net/2018/12/19/81e30f7a-a061-4cfb-aace-39fdf4860955/</id>
    <published>2018-12-19T00:26:48.000Z</published>
    <updated>2019-03-22T10:43:20.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、概要"><a href="#1、概要" class="headerlink" title="1、概要"></a>1、概要</h3><p>生日跨年提醒，在EHR系统中，用户选择某个时间段都那些人过生日，并发送邮件提醒；本文只描述如何去跨年查询。<br>前端使用Vue.js/Element UI;<br>后端使用Java/Spring Cloud/微服务架构模式<br>本文修改于：2019年03月15日<br><a id="more"></a></p><h3 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h3><p>1、前端获取的是时间段，用户输入的时间段发送给后端的时候，判断一下用户选择的时间；<br>2、如果没有跨年，则调用函数a；<br>3、如果跨年了，则调用函数b；</p><h3 id="3、实现过程"><a href="#3、实现过程" class="headerlink" title="3、实现过程"></a>3、实现过程</h3><h4 id="3-1、前端实现"><a href="#3-1、前端实现" class="headerlink" title="3.1、前端实现"></a>3.1、前端实现</h4><h6 id="3-1-1、界面效果"><a href="#3-1-1、界面效果" class="headerlink" title="3.1.1、界面效果"></a>3.1.1、界面效果</h6><p><img src="../../../../../../images/2.png" alt=""></p><p>Element UI时间组件：<a href="http://element-cn.eleme.io/#/zh-CN/component/date-picker" target="_blank" rel="noopener">点击这里</a></p><h6 id="3-1-2、前端代码"><a href="#3-1-2、前端代码" class="headerlink" title="3.1.2、前端代码"></a>3.1.2、前端代码</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handleFilter() &#123;</span><br><span class="line">  <span class="keyword">this</span>.searchkpi();</span><br><span class="line">  <span class="keyword">this</span>.listQuery.startDataBirthdayPoint = <span class="keyword">this</span>.employeeBirthday[<span class="number">0</span>].toString().substring(<span class="number">5</span>, <span class="number">10</span>).replace(<span class="string">'-'</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">this</span>.listQuery.endDataBirthdayPoint = <span class="keyword">this</span>.employeeBirthday[<span class="number">1</span>].toString().substring(<span class="number">5</span>, <span class="number">10</span>).replace(<span class="string">'-'</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.employeeBirthday[<span class="number">0</span>].toString().substring(<span class="number">0</span>, <span class="number">4</span>) === <span class="keyword">this</span>.employeeBirthday[<span class="number">1</span>].toString().substring(<span class="number">0</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getListNotAcrossYear();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.getList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代码片段1</span></span><br></pre></td></tr></table></figure><p>第5行代码，判断了年份是否相同，如果年份是否相同，如果相同，则调用<b>this.getListNotAcrossYear</b>, 调用接口：<b>pageBirthdayNotAcrossYear()</b>, 参数为this.listQuery;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getListNotAcrossYear() &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">  pageBirthdayNotAcrossYear(<span class="keyword">this</span>.listQuery)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.list = response.data.rows;</span><br><span class="line">      <span class="keyword">this</span>.total = response.data.total;</span><br><span class="line">      <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error)</span><br><span class="line">      <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 代码片段2</span></span><br></pre></td></tr></table></figure></p><p><b>this.listQuery</b>包含两个字段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">startDataBirthdayPoint: <span class="literal">undefined</span>,</span><br><span class="line">endDataBirthdayPoint: <span class="literal">undefined</span></span><br><span class="line"> <span class="comment">// 代码片段3</span></span><br></pre></td></tr></table></figure></p><p>这两个字段，作为listQuery的一部分，作为参数，通过前端的API请求接口，传递给后端:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生日提醒</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pageBirthdayNotAcrossYear</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/admin/mEmployeeInfo/pageBirthdayNotAcrossYear'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    params: query</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 代码片段4</span></span><br></pre></td></tr></table></figure></p><p>从接口中可以看到：传入的参数是<b>query</b>,使用GET的方式传递给后端。<br>相同的，在<b>代码片段1</b>中的第8行，则是请求跨年的，在前端的代码部分都是一样的，这里我是在前端就对其进行了分开，后来想了想，如果日期传递到后端，在后端进行处理，代码量要少很多。</p><h4 id="3-2、后端实现"><a href="#3-2、后端实现" class="headerlink" title="3.2、后端实现"></a>3.2、后端实现</h4><p>先看下不跨年的，包含Java代码和MyBatis的.xml映射文件；</p><h6 id="3-2-1、Java代码"><a href="#3-2-1、Java代码" class="headerlink" title="3.2.1、Java代码"></a>3.2.1、Java代码</h6><p>首先是Controller类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"mEmployeeInfo"</span>)</span><br><span class="line"><span class="comment">// 代码片段5</span></span><br></pre></td></tr></table></figure></p><p>应和了在代码片段4中的请求接口；<br>这是Java代码Controller的函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/pageBirthdayNotAcrossYear"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TableResultResponse&lt;MEmployeeInfo&gt; <span class="title">selectBirthdayNotAcrossYear</span><span class="params">(@RequestParam Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">    PageQuery query = <span class="keyword">new</span> PageQuery(params, params);</span><br><span class="line">    <span class="keyword">return</span> mEmployeeInfoBiz.selectBirthdayNotAcrossYear(query);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码片段6</span></span><br></pre></td></tr></table></figure></p><p>函数的类型是<b>TableResultResponse</b>,返回的是一个结果集；</p><p>这是Java代码Service类的函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生日到期提醒(不跨年)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TableResultResponse&lt;MEmployeeInfo&gt; <span class="title">selectBirthdayNotAcrossYear</span><span class="params">(PageQuery&lt;MEmployeeInfo&gt; query)</span> </span>&#123;</span><br><span class="line">    PageExample example = <span class="keyword">new</span> PageExample(MEmployeeInfo.class, query.getData());</span><br><span class="line">    Page&lt;MEmployeeInfo&gt; result = PageHelper.startPage(query.getPage(), query.getLimit());</span><br><span class="line">    List&lt;MEmployeeInfo&gt; list = mEmployeeInfoMapper.selectBirthdayNotAcrossYear(example);</span><br><span class="line">    <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mergeCore.mergeResult(MEmployeeInfo.class, list);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> TableResultResponse&lt;MEmployeeInfo&gt;(result.getTotal(), list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代码片段7</span></span><br></pre></td></tr></table></figure></p><p>DAO类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;MEmployeeInfo&gt; <span class="title">selectBirthdayNotAcrossYear</span><span class="params">(Object example)</span></span>;</span><br><span class="line"><span class="comment">// 代码片段8</span></span><br></pre></td></tr></table></figure></p><h4 id="3-2-2、MyBatis的映射文件"><a href="#3-2-2、MyBatis的映射文件" class="headerlink" title="3.2.2、MyBatis的映射文件"></a>3.2.2、MyBatis的映射文件</h4><p>接下来是MyBatis的映射文件代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectBirthdayNotAcrossYear"</span> parameterType=<span class="string">"com.savor.security.common.entity.PageExample"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    t.*, y.position_name</span><br><span class="line">    FROM</span><br><span class="line">    m_employee_info t</span><br><span class="line">    LEFT JOIN m_position y ON t.position_id = y.position_id</span><br><span class="line">    WHERE</span><br><span class="line">    t.employee_id IS NOT NULL</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"data.startDataBirthdayPoint != null and data.startDataBirthdayPoint != '' and data.endDataBirthdayPoint != null and data.endDataBirthdayPoint !=''"</span>&gt;</span><br><span class="line">        AND DATE_FORMAT(t.employee_birthday , '%m%d') BETWEEN #&#123;data.startDataBirthdayPoint&#125; AND #&#123;data.endDataBirthdayPoint&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">-- 代码片段<span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>跨年的请求处理，跟上面的代码没有区别，不同之处体现在最后的映射文件这里：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectByBirthday"</span> parameterType=<span class="string">"com.savor.security.common.entity.PageExample"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">    select a.* from (</span><br><span class="line">    SELECT</span><br><span class="line">    t.*, y.position_name</span><br><span class="line">    FROM</span><br><span class="line">    m_employee_info t</span><br><span class="line">    LEFT JOIN m_position y ON t.position_id = y.position_id</span><br><span class="line">    WHERE</span><br><span class="line">    t.employee_id IS NOT NULL</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"data.startDataBirthdayPoint != null and data.startDataBirthdayPoint != '' and data.endDataBirthdayPoint != null and data.endDataBirthdayPoint !=''"</span>&gt;</span><br><span class="line">        AND DATE_FORMAT(t.employee_birthday , '%m%d') BETWEEN #&#123;data.startDataBirthdayPoint&#125; AND #&#123;data.endDataBirthdayPoint&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    UNION ALL</span><br><span class="line">    SELECT</span><br><span class="line">    t.*, y.position_name</span><br><span class="line">    FROM</span><br><span class="line">    m_employee_info t</span><br><span class="line">    LEFT JOIN m_position y ON t.position_id = y.position_id</span><br><span class="line">    WHERE</span><br><span class="line">    t.employee_id IS NOT NULL</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"data.startDataBirthdayPoint != null and data.startDataBirthdayPoint != '' and data.endDataBirthdayPoint != null and data.endDataBirthdayPoint !=''"</span>&gt;</span><br><span class="line">        <span class="function">AND <span class="title">DATE_FORMAT</span><span class="params">(t.employee_birthday , <span class="string">'%m%d'</span>)</span> BETWEEN #</span>&#123;data.startDataBirthdayPoint&#125; AND <span class="string">'1231'</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    UNION ALL</span><br><span class="line">    SELECT</span><br><span class="line">    t.*, y.position_name</span><br><span class="line">    FROM</span><br><span class="line">    m_employee_info t</span><br><span class="line">    LEFT JOIN m_position y ON t.position_id = y.position_id</span><br><span class="line">    WHERE</span><br><span class="line">    t.employee_id IS NOT NULL</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"data.startDataBirthdayPoint != null and data.startDataBirthdayPoint != '' and data.endDataBirthdayPoint != null and data.endDataBirthdayPoint !=''"</span>&gt;</span><br><span class="line">        <span class="function">AND <span class="title">DATE_FORMAT</span><span class="params">(t.employee_birthday , <span class="string">'%m%d'</span>)</span> BETWEEN '0101' AND #</span>&#123;data.endDataBirthdayPoint&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    ) as a</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>其中也分成了三段，第一段就是正常的输入日期，但是不会去调用了。<br>后两段是：<br>如果跨年的时候，比如选择这个时间段2018-12-05~2019-03-15进行查询，那么数据流到映射文件这里的时候，会被分成两段（因为生日是考虑月日的，不考虑年）：就是12-05~12-31一部分人；01-01~03-15第二部分人；最后加起来，就是要的人数；</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、概要&quot;&gt;&lt;a href=&quot;#1、概要&quot; class=&quot;headerlink&quot; title=&quot;1、概要&quot;&gt;&lt;/a&gt;1、概要&lt;/h3&gt;&lt;p&gt;生日跨年提醒，在EHR系统中，用户选择某个时间段都那些人过生日，并发送邮件提醒；本文只描述如何去跨年查询。&lt;br&gt;前端使用Vue.js/Element UI;&lt;br&gt;后端使用Java/Spring Cloud/微服务架构模式&lt;br&gt;本文修改于：2019年03月15日&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="https://youxiu.net/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>前端开发Vue.js问题整理与总结</title>
    <link href="https://youxiu.net/2018/12/18/c03d5240-9bbc-4ce5-83c5-32bace9f8c2b/"/>
    <id>https://youxiu.net/2018/12/18/c03d5240-9bbc-4ce5-83c5-32bace9f8c2b/</id>
    <published>2018-12-18T05:37:16.000Z</published>
    <updated>2019-03-15T06:28:55.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>所在的项目上前端开发使用技术栈为Vue.js。</li><li>本文的主要内容开发时候遇到的问题、解决的方案、常用的解决方法。</li><li>思路。<a id="more"></a><h2 id="测试代码高亮"><a href="#测试代码高亮" class="headerlink" title="测试代码高亮"></a>测试代码高亮</h2></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单语法</span></span><br><span class="line">Vue.component(<span class="string">'props-demo-simple'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'size'</span>, <span class="string">'myMessage'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span></span><br><span class="line"><span class="comment">// 对象语法，提供校验</span></span><br><span class="line">Vue.component(<span class="string">'props-demo-advanced'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 检测类型</span></span><br><span class="line">    height: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 检测类型 + 其他验证</span></span><br><span class="line">    age: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt;= <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="组件弹窗"><a href="#组件弹窗" class="headerlink" title="组件弹窗"></a>组件弹窗</h2><ul><li>原因:主要原因是没理解弹窗的原理。写的时候没有按照步骤和关键点进行。</li></ul><h2 id="JavaScript数据结构"><a href="#JavaScript数据结构" class="headerlink" title="JavaScript数据结构"></a>JavaScript数据结构</h2><ul><li>对JavaScript数组的理解不熟悉。</li><li>对返回的数据做不出明确的判断来。</li></ul><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所在的项目上前端开发使用技术栈为Vue.js。&lt;/li&gt;
&lt;li&gt;本文的主要内容开发时候遇到的问题、解决的方案、常用的解决方法。&lt;/li&gt;
&lt;li&gt;思路。
    
    </summary>
    
    
      <category term="Vue.js" scheme="https://youxiu.net/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>微服务模块的理解</title>
    <link href="https://youxiu.net/2018/12/17/ff763a72-1a9f-4896-be36-d6dddd3b7d11/"/>
    <id>https://youxiu.net/2018/12/17/ff763a72-1a9f-4896-be36-d6dddd3b7d11/</id>
    <published>2018-12-17T06:16:51.000Z</published>
    <updated>2019-03-22T10:35:28.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、项目微服务结构整体理解"><a href="#1、项目微服务结构整体理解" class="headerlink" title="1、项目微服务结构整体理解"></a>1、项目微服务结构整体理解</h3><h3 id="2、背景"><a href="#2、背景" class="headerlink" title="2、背景"></a>2、背景</h3><ul><li>各司其职、集中管理、存在单向或多向调用关系；<a id="more"></a></li></ul><h3 id="3、意义"><a href="#3、意义" class="headerlink" title="3、意义"></a>3、意义</h3><ul><li>提高迭代效率；</li><li>降低开发黏连性；</li><li>节约成本</li></ul><h3 id="4、实现"><a href="#4、实现" class="headerlink" title="4、实现"></a>4、实现</h3><h3 id="5、结构"><a href="#5、结构" class="headerlink" title="5、结构"></a>5、结构</h3><h4 id="5-1、项目启动的入口CenterBootstrap"><a href="#5-1、项目启动的入口CenterBootstrap" class="headerlink" title="5.1、项目启动的入口CenterBootstrap"></a>5.1、项目启动的入口CenterBootstrap</h4><ul><li>各项服务的注册、管理中心。</li><li>微服务请求转发。<h4 id="5-2、鉴权（权限）服务AuthBootstrap"><a href="#5-2、鉴权（权限）服务AuthBootstrap" class="headerlink" title="5.2、鉴权（权限）服务AuthBootstrap"></a>5.2、鉴权（权限）服务AuthBootstrap</h4></li><li>JWT处理权限<h4 id="5-3、字典服务DictBootstrap"><a href="#5-3、字典服务DictBootstrap" class="headerlink" title="5.3、字典服务DictBootstrap"></a>5.3、字典服务DictBootstrap</h4></li><li>管理项目的数据字典。<h4 id="5-4、后台管理服务AdminBootstrap"><a href="#5-4、后台管理服务AdminBootstrap" class="headerlink" title="5.4、后台管理服务AdminBootstrap"></a>5.4、后台管理服务AdminBootstrap</h4></li><li>连接数据库、处理数据。<h4 id="5-5、网关服务GateBootstrap"><a href="#5-5、网关服务GateBootstrap" class="headerlink" title="5.5、网关服务GateBootstrap"></a>5.5、网关服务GateBootstrap</h4></li><li>接收前端的请求并转发至其他服务。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、项目微服务结构整体理解&quot;&gt;&lt;a href=&quot;#1、项目微服务结构整体理解&quot; class=&quot;headerlink&quot; title=&quot;1、项目微服务结构整体理解&quot;&gt;&lt;/a&gt;1、项目微服务结构整体理解&lt;/h3&gt;&lt;h3 id=&quot;2、背景&quot;&gt;&lt;a href=&quot;#2、背景&quot; class=&quot;headerlink&quot; title=&quot;2、背景&quot;&gt;&lt;/a&gt;2、背景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;各司其职、集中管理、存在单向或多向调用关系；
    
    </summary>
    
    
      <category term="微服务" scheme="https://youxiu.net/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发基础之学习Objective-C笔记一</title>
    <link href="https://youxiu.net/2018/12/11/f72e9838-7a1a-4f0f-ab4d-0146231490a1/"/>
    <id>https://youxiu.net/2018/12/11/f72e9838-7a1a-4f0f-ab4d-0146231490a1/</id>
    <published>2018-12-11T13:11:22.000Z</published>
    <updated>2019-03-22T10:36:15.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><a id="more"></a><h3 id="2、背景"><a href="#2、背景" class="headerlink" title="2、背景"></a>2、背景</h3><ul><li>学习一门新的手艺。</li><li>做个小的Demo，解决自己对于现有的某些工具不能满足自己需求的痛点。</li><li>Apple Store一些应用需要花钱。</li></ul><h3 id="3、计划"><a href="#3、计划" class="headerlink" title="3、计划"></a>3、计划</h3><ul><li>第一、先看书。重点关注一下指针这块。</li><li>第二、照着实例写一写UI。画一画界面。</li><li>第三、写一写后台的逻辑。实现一些小的功能。</li><li>第四、整合记录一下笔记和发布一下源码。提升一下。</li><li>第五、规划一个tools的功能，写计划书，准备开发。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="https://youxiu.net/tags/Objective-C/"/>
    
  </entry>
  
</feed>
